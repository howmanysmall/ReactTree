[{"title":"Getting Started with ReactTree","type":0,"sectionRef":"#","url":"/ReactTree/docs/intro","content":"Getting Started with ReactTree Here are some quick links to get started using ReactTree: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/ReactTree/docs/installation","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"/ReactTree/docs/installation#method-1---wally","content":"Setup Wally by using wally init.Add howmanysmall/react-tree as a dependency. [dependencies] ReactTree = &quot;howmanysmall/react-tree@^1.0.1&quot;  "},{"title":"Method #2 - HttpService​","type":1,"pageTitle":"Installation","url":"/ReactTree/docs/installation#method-2---httpservice","content":"This method uses HttpService to install ReactTree. In Roblox Studio, paste the following command into your command bar.Run the following command: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local HttpService = game:GetService(&quot;HttpService&quot;) local HttpEnabled = HttpService.HttpEnabled local REPOSITORY_NAME = &quot;ReactTree&quot; HttpService.HttpEnabled = true local function RequestAsync(RequestDictionary) return HttpService:RequestAsync(RequestDictionary) end local function GetAsync(Url, Headers) Headers[&quot;cache-control&quot;] = &quot;no-cache&quot; local Success, ResponseDictionary = pcall(RequestAsync, { Headers = Headers; Method = &quot;GET&quot;; Url = Url; }) if Success then if ResponseDictionary.Success then return ResponseDictionary.Body else return false, string.format(&quot;HTTP %*: %*&quot;, ResponseDictionary.StatusCode, ResponseDictionary.StatusMessage) end else return false, ResponseDictionary end end local function Initify(Root) local InitFile = Root:FindFirstChild(&quot;init&quot;) or Root:FindFirstChild(&quot;init.lua&quot;) or Root:FindFirstChild(&quot;init.client.lua&quot;) or Root:FindFirstChild(&quot;init.server.lua&quot;) if InitFile then InitFile.Name = Root.Name InitFile.Parent = Root.Parent for _, Child in Root:GetChildren() do Child.Parent = InitFile end Root:Destroy() Root = InitFile end for _, Child in Root:GetChildren() do Initify(Child) end return Root end local FilesList = HttpService:JSONDecode(assert(GetAsync( string.format(&quot;https://api.github.com/repos/howmanysmall/%*/contents/src&quot;, REPOSITORY_NAME), {accept = &quot;application/vnd.github.v3+json&quot;} ))) local Package = Instance.new(&quot;Folder&quot;) Package.Name = REPOSITORY_NAME for _, FileData in FilesList do local ModuleScript = Instance.new(&quot;ModuleScript&quot;) ModuleScript.Name = tostring(string.match(FileData.name, &quot;(%w+)%.lua&quot;)) local Success, Source = GetAsync(FileData.download_url, {}) if not Success then ModuleScript.Source = string.format(&quot;-- %*&quot;, tostring(Source)) else ModuleScript.Source = tostring(Success) end ModuleScript.Parent = Package end Package.Parent = ReplicatedStorage Initify(Package) HttpService.HttpEnabled = HttpEnabled "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"/ReactTree/docs/installation#next","content":"Now, check out the API reference! "},{"title":"ReactTree","type":0,"sectionRef":"#","url":"/ReactTree/api/ReactTree","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#types","content":" "},{"title":"IReactHandle​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#IReactHandle","content":"&lt;/&gt; interface IReactHandle { key: number | string-- The key of the element. parent: Instance? -- The parent of the element. root: any-- The root of the element. This is the return result of React.createElement. } This is what is returned when you call ReactTree.mount, and it is used for unmounting with ReactTree.unmount. "},{"title":"Properties​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#properties","content":" "},{"title":"StrictValidation​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#StrictValidation","content":"&lt;/&gt; ReactTree.StrictValidation: boolean Whether or not to perform strict validation on the React tree. "},{"title":"Functions​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#functions","content":" "},{"title":"mount​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#mount","content":"&lt;/&gt; ReactTree.mount( element: any,-- The React element to mount. This is the return result of React.createElement. parent?: Instance ,-- Where you want to mount the tree to. key?: string-- The key of the element. Essentially just Instance.Name. ) → IReactHandle-- The handle to the mounted element. Used to mount a React element into the Roblox instance tree. Creates a Roblox Instance given a Roact element, and optionally aparent to put it in, and a key to use as the instance's Name. The return result is an IReactHandle, which can be used to unmount the element later using ReactTree.unmount.  "},{"title":"unmount​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#unmount","content":"&lt;/&gt; ReactTree.unmount( reactHandle: IReactHandle-- The handle to unmount. ) → () Unmounts an element that was mounted with ReactTree.mount.  "},{"title":"update​","type":1,"pageTitle":"ReactTree","url":"/ReactTree/api/ReactTree#update","content":"&lt;/&gt; ReactTree.update( reactHandle: IReactHandle,-- The handle to update. element: any-- The new element to update the handle with. This is the return result of React.createElement. ) → IReactHandle-- The same handle that was passed in. Updates an existing instance handle with a new element, returning the same handle. This can be used to update a UI created withReactTree.mount by passing in a new element with new props. warning This is really not recommended to use, it's extremely slow and can cause major performance issues. Find a better way to handle your trees. "}]